{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\pushtop_reactjs_cms\\\\src\\\\views\\\\apps\\\\calendar\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\n// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react'; // ** Full Calendar & it's Plugins\n\nimport FullCalendar from '@fullcalendar/react';\nimport listPlugin from '@fullcalendar/list';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction'; // ** Custom Components\n\nimport Avatar from '@components/avatar'; // ** Third Party Components\n\nimport { toast } from 'react-toastify';\nimport { Card, CardBody } from 'reactstrap';\nimport { Menu, Check } from 'react-feather'; // ** Toast Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToastComponent = _ref => {\n  let {\n    title,\n    icon,\n    color\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toastify-header pb-0\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          size: \"sm\",\n          color: color,\n          icon: icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"toast-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 3\n  }, this);\n};\n\n_c = ToastComponent;\n\nconst Calendar = props => {\n  _s();\n\n  // ** Refs\n  const calendarRef = useRef(null); // ** Props\n\n  const {\n    store,\n    isRtl,\n    dispatch,\n    calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props; // ** UseEffect checks for CalendarAPI Update\n\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi());\n    }\n  }, [calendarApi]); // ** calendarOptions(Props)\n\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n    },\n\n    /*\r\n      Enable dragging and resizing event\r\n      ? Docs: https://fullcalendar.io/docs/editable\r\n    */\n    editable: true,\n\n    /*\r\n      Enable resizing event from start\r\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\r\n    */\n    eventResizableFromStart: true,\n\n    /*\r\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\r\n      ? Docs: https://fullcalendar.io/docs/dragScroll\r\n    */\n    dragScroll: true,\n\n    /*\r\n      Max number of events within a given day\r\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\r\n    */\n    dayMaxEvents: 2,\n\n    /*\r\n      Determines if day names and week names are clickable\r\n      ? Docs: https://fullcalendar.io/docs/navLinks\r\n    */\n    navLinks: true,\n\n    eventClassNames(_ref2) {\n      let {\n        event: calendarEvent\n      } = _ref2;\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar];\n      return [// Background Color\n      `bg-light-${colorName}`];\n    },\n\n    eventClick(_ref3) {\n      let {\n        event: clickedEvent\n      } = _ref3;\n      dispatch(selectEvent(clickedEvent));\n      handleAddEventSidebar(); // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: /*#__PURE__*/_jsxDEV(Menu, {\n          className: \"d-xl-none d-block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this),\n\n        click() {\n          toggleSidebar(true);\n        }\n\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent;\n      ev.start = info.date;\n      ev.end = info.date;\n      dispatch(selectEvent(ev));\n      handleAddEventSidebar();\n    },\n\n    /*\r\n      Handle event drop (Also include dragged event)\r\n      ? Docs: https://fullcalendar.io/docs/eventDrop\r\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\r\n    */\n    eventDrop(_ref4) {\n      let {\n        event: droppedEvent\n      } = _ref4;\n      dispatch(updateEvent(droppedEvent));\n      toast.success( /*#__PURE__*/_jsxDEV(ToastComponent, {\n        title: \"Event Updated\",\n        color: \"success\",\n        icon: /*#__PURE__*/_jsxDEV(Check, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 81\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), {\n        icon: false,\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      });\n    },\n\n    /*\r\n      Handle event resize\r\n      ? Docs: https://fullcalendar.io/docs/eventResize\r\n    */\n    eventResize(_ref5) {\n      let {\n        event: resizedEvent\n      } = _ref5;\n      dispatch(updateEvent(resizedEvent));\n      toast.success( /*#__PURE__*/_jsxDEV(ToastComponent, {\n        title: \"Event Updated\",\n        color: \"success\",\n        icon: /*#__PURE__*/_jsxDEV(Check, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 81\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), {\n        icon: false,\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      });\n    },\n\n    ref: calendarRef,\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"shadow-none border-0 mb-0 rounded-0\",\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      className: \"pb-0\",\n      children: [/*#__PURE__*/_jsxDEV(FullCalendar, { ...calendarOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"HuswXQNKgAj2xlMza6JPwM9t0kA=\");\n\n_c2 = Calendar;\nexport default _c3 = /*#__PURE__*/memo(Calendar);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ToastComponent\");\n$RefreshReg$(_c2, \"Calendar\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["E:/Project/pushtop_reactjs_cms/src/views/apps/calendar/Calendar.js"],"names":["useEffect","useRef","memo","Fragment","FullCalendar","listPlugin","dayGridPlugin","timeGridPlugin","interactionPlugin","Avatar","toast","Card","CardBody","Menu","Check","ToastComponent","title","icon","color","Calendar","props","calendarRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","current","getApi","calendarOptions","events","length","plugins","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","event","calendarEvent","colorName","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","click","dateClick","info","ev","date","eventDrop","droppedEvent","success","autoClose","hideProgressBar","closeButton","eventResize","resizedEvent","ref","direction"],"mappings":"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","sourcesContent":["// ** React Import\r\nimport { useEffect, useRef, memo, Fragment } from 'react'\r\n\r\n// ** Full Calendar & it's Plugins\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport listPlugin from '@fullcalendar/list'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { toast } from 'react-toastify'\r\nimport { Card, CardBody } from 'reactstrap'\r\nimport { Menu, Check } from 'react-feather'\r\n\r\n// ** Toast Component\r\nconst ToastComponent = ({ title, icon, color }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color={color} icon={icon} />\r\n        <h6 className='toast-title'>{title}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst Calendar = props => {\r\n  // ** Refs\r\n  const calendarRef = useRef(null)\r\n\r\n  // ** Props\r\n  const {\r\n    store,\r\n    isRtl,\r\n    dispatch,\r\n    calendarsColor,\r\n    calendarApi,\r\n    setCalendarApi,\r\n    handleAddEventSidebar,\r\n    blankEvent,\r\n    toggleSidebar,\r\n    selectEvent,\r\n    updateEvent\r\n  } = props\r\n\r\n  // ** UseEffect checks for CalendarAPI Update\r\n  useEffect(() => {\r\n    if (calendarApi === null) {\r\n      setCalendarApi(calendarRef.current.getApi())\r\n    }\r\n  }, [calendarApi])\r\n\r\n  // ** calendarOptions(Props)\r\n  const calendarOptions = {\r\n    events: store.events.length ? store.events : [],\r\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\r\n    initialView: 'dayGridMonth',\r\n    headerToolbar: {\r\n      start: 'sidebarToggle, prev,next, title',\r\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\r\n    },\r\n    /*\r\n      Enable dragging and resizing event\r\n      ? Docs: https://fullcalendar.io/docs/editable\r\n    */\r\n    editable: true,\r\n\r\n    /*\r\n      Enable resizing event from start\r\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\r\n    */\r\n    eventResizableFromStart: true,\r\n\r\n    /*\r\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\r\n      ? Docs: https://fullcalendar.io/docs/dragScroll\r\n    */\r\n    dragScroll: true,\r\n\r\n    /*\r\n      Max number of events within a given day\r\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\r\n    */\r\n    dayMaxEvents: 2,\r\n\r\n    /*\r\n      Determines if day names and week names are clickable\r\n      ? Docs: https://fullcalendar.io/docs/navLinks\r\n    */\r\n    navLinks: true,\r\n\r\n    eventClassNames({ event: calendarEvent }) {\r\n      // eslint-disable-next-line no-underscore-dangle\r\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\r\n\r\n      return [\r\n        // Background Color\r\n        `bg-light-${colorName}`\r\n      ]\r\n    },\r\n\r\n    eventClick({ event: clickedEvent }) {\r\n      dispatch(selectEvent(clickedEvent))\r\n      handleAddEventSidebar()\r\n\r\n      // * Only grab required field otherwise it goes in infinity loop\r\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\r\n      // event.value = grabEventDataFromEventApi(clickedEvent)\r\n\r\n      // eslint-disable-next-line no-use-before-define\r\n      // isAddNewEventSidebarActive.value = true\r\n    },\r\n\r\n    customButtons: {\r\n      sidebarToggle: {\r\n        text: <Menu className='d-xl-none d-block' />,\r\n        click() {\r\n          toggleSidebar(true)\r\n        }\r\n      }\r\n    },\r\n\r\n    dateClick(info) {\r\n      const ev = blankEvent\r\n      ev.start = info.date\r\n      ev.end = info.date\r\n      dispatch(selectEvent(ev))\r\n      handleAddEventSidebar()\r\n    },\r\n\r\n    /*\r\n      Handle event drop (Also include dragged event)\r\n      ? Docs: https://fullcalendar.io/docs/eventDrop\r\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\r\n    */\r\n    eventDrop({ event: droppedEvent }) {\r\n      dispatch(updateEvent(droppedEvent))\r\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\r\n        icon: false,\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeButton: false\r\n      })\r\n    },\r\n\r\n    /*\r\n      Handle event resize\r\n      ? Docs: https://fullcalendar.io/docs/eventResize\r\n    */\r\n    eventResize({ event: resizedEvent }) {\r\n      dispatch(updateEvent(resizedEvent))\r\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\r\n        icon: false,\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeButton: false\r\n      })\r\n    },\r\n\r\n    ref: calendarRef,\r\n\r\n    // Get direction from app state (store)\r\n    direction: isRtl ? 'rtl' : 'ltr'\r\n  }\r\n\r\n  return (\r\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\r\n      <CardBody className='pb-0'>\r\n        <FullCalendar {...calendarOptions} />{' '}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default memo(Calendar)\r\n"]},"metadata":{},"sourceType":"module"}