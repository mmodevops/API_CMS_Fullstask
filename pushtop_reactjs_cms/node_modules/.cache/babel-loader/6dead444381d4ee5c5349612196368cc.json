{"ast":null,"code":"import React, { useContext, createContext, useRef, useEffect, Children, cloneElement, useReducer, useState } from 'react';\nimport cx from 'clsx';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar Context = /*#__PURE__*/createContext({});\n/**\r\n * Access parent ref tracker.\r\n */\n\nfunction useRefTrackerContext() {\n  return useContext(Context);\n}\n\nvar RefTrackerProvider = function RefTrackerProvider(props) {\n  return React.createElement(Context.Provider, {\n    value: props.refTracker\n  }, props.children);\n};\n\nfunction createEventManager() {\n  var eventList = new Map();\n  return {\n    on: function on(event, handler) {\n      var _eventList$get; //eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n\n      eventList.has(event) ? (_eventList$get = eventList.get(event)) == null ? void 0 : _eventList$get.add(handler) : eventList.set(event, new Set([handler]));\n      return this;\n    },\n    off: function off(event, handler) {\n      handler ? eventList.get(event)[\"delete\"](handler) : eventList[\"delete\"](event);\n      return this;\n    },\n    emit: function emit(event, args) {\n      if (process.env.NODE !== 'production') {\n        var currentEv = event;\n\n        if (!eventList.has(event) && currentEv !== 0\n        /* HIDE_ALL */\n        ) {\n          console.error(\"It seems that the menu you are trying to display is not renderer or you have a menu id mismatch.\", \"You used the menu id: \" + event);\n        }\n      }\n\n      eventList.has(event) && eventList.get(event).forEach(function (handler) {\n        handler(args);\n      });\n      return this;\n    }\n  };\n}\n\nvar eventManager = /*#__PURE__*/createEventManager();\n\nfunction usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n/**\r\n * Used to store children refs\r\n */\n\n\nfunction useRefTracker() {\n  return useRef(new Map()).current;\n}\n\nvar contextMenu = {\n  show: function show(_ref) {\n    var id = _ref.id,\n        event = _ref.event,\n        props = _ref.props,\n        position = _ref.position;\n    if (event.preventDefault) event.preventDefault();\n    eventManager.emit(0\n    /* HIDE_ALL */\n    ).emit(id, {\n      event: event.nativeEvent || event,\n      props: props,\n      position: position\n    });\n  },\n  hideAll: function hideAll() {\n    eventManager.emit(0\n    /* HIDE_ALL */\n    );\n  }\n};\n\nfunction useContextMenu(props) {\n  return {\n    show: function show(event, params) {\n      if (process.env.NODE_ENV === 'development') {\n        if (!(props == null ? void 0 : props.id) && !(params == null ? void 0 : params.id)) console.error(\"You need to provide an id when initializing the hook `useContextMenu({ id: 'your id' })` or when you display the menu `show(e, { id: 'your id' })`. The later is used to override the one defined during initialization.\");\n      }\n\n      contextMenu.show({\n        id: (params == null ? void 0 : params.id) || (props == null ? void 0 : props.id),\n        props: (params == null ? void 0 : params.props) || (props == null ? void 0 : props.props),\n        event: event,\n        position: params == null ? void 0 : params.position\n      });\n    },\n    hideAll: function hideAll() {\n      contextMenu.hideAll();\n    }\n  };\n}\n/**\r\n * Used to control keyboard navigation\r\n */\n\n\nfunction createMenuController() {\n  var menuList = new Map();\n  var focusedIndex;\n  var parentNode;\n  var isAtRoot;\n  var currentItems;\n  var forceCloseSubmenu = false;\n\n  function init(rootMenu) {\n    currentItems = rootMenu;\n    focusedIndex = -1;\n    isAtRoot = true;\n  }\n\n  function focusSelectedItem() {\n    currentItems[focusedIndex].node.focus();\n  }\n\n  function isSubmenuFocused() {\n    return focusedIndex >= 0 && currentItems[focusedIndex].isSubmenu;\n  }\n\n  function getSubmenuItems() {\n    return Array.from(currentItems[focusedIndex].submenuRefTracker.values());\n  }\n\n  function isFocused() {\n    if (focusedIndex === -1) {\n      // focus first item\n      moveDown();\n      return false;\n    }\n\n    return true;\n  }\n\n  function moveDown() {\n    if (focusedIndex + 1 < currentItems.length) {\n      focusedIndex++;\n    } else if (focusedIndex + 1 === currentItems.length) {\n      focusedIndex = 0;\n    }\n\n    if (forceCloseSubmenu) closeSubmenu();\n    focusSelectedItem();\n  }\n\n  function moveUp() {\n    if (focusedIndex === -1 || focusedIndex === 0) {\n      focusedIndex = currentItems.length - 1;\n    } else if (focusedIndex - 1 < currentItems.length) {\n      focusedIndex--;\n    }\n\n    if (forceCloseSubmenu) closeSubmenu();\n    focusSelectedItem();\n  }\n\n  function openSubmenu() {\n    if (isFocused() && isSubmenuFocused()) {\n      var submenuItems = getSubmenuItems();\n      var currentNode = currentItems[focusedIndex].node;\n      menuList.set(currentNode, {\n        isRoot: isAtRoot,\n        focusedIndex: focusedIndex,\n        parentNode: parentNode || currentNode,\n        items: currentItems\n      });\n      currentNode.classList.add(\"react-contexify__submenu--is-open\"\n      /* submenuOpen */\n      );\n      parentNode = currentNode;\n\n      if (submenuItems.length > 0) {\n        focusedIndex = 0;\n        currentItems = submenuItems;\n      } else {\n        forceCloseSubmenu = true;\n      }\n\n      isAtRoot = false;\n      focusSelectedItem();\n      return true;\n    }\n\n    return false;\n  }\n\n  function closeSubmenu() {\n    if (isFocused() && !isAtRoot) {\n      var _menuList$get = menuList.get(parentNode),\n          isRoot = _menuList$get.isRoot,\n          items = _menuList$get.items,\n          parentFocusedIndex = _menuList$get.focusedIndex,\n          menuParentNode = _menuList$get.parentNode;\n\n      parentNode.classList.remove(\"react-contexify__submenu--is-open\"\n      /* submenuOpen */\n      );\n      currentItems = items;\n      parentNode = menuParentNode;\n\n      if (isRoot) {\n        isAtRoot = true;\n        menuList.clear();\n      }\n\n      if (!forceCloseSubmenu) {\n        focusedIndex = parentFocusedIndex;\n        focusSelectedItem();\n      }\n    }\n  }\n\n  return {\n    init: init,\n    moveDown: moveDown,\n    moveUp: moveUp,\n    openSubmenu: openSubmenu,\n    closeSubmenu: closeSubmenu\n  };\n}\n\nvar theme = {\n  light: 'light',\n  dark: 'dark'\n};\nvar animation = {\n  fade: 'fade',\n  flip: 'flip',\n  scale: 'scale',\n  slide: 'slide'\n};\n\nvar NOOP = function NOOP() {};\n\nfunction isFn(v) {\n  return typeof v === 'function';\n}\n\nfunction isStr(v) {\n  return typeof v === 'string';\n}\n\nfunction isTouchEvent(e) {\n  return e.type === 'touchend';\n}\n\nfunction cloneItems(children, props) {\n  return Children.map( // remove null item\n  Children.toArray(children).filter(Boolean), function (item) {\n    return cloneElement(item, props);\n  });\n}\n\nfunction getMousePosition(e) {\n  var pos = {\n    x: 0,\n    y: 0\n  };\n\n  if (isTouchEvent(e) && e.changedTouches && e.changedTouches.length > 0) {\n    pos.x = e.changedTouches[0].clientX;\n    pos.y = e.changedTouches[0].clientY;\n  } else {\n    pos.x = e.clientX;\n    pos.y = e.clientY;\n  }\n\n  if (!pos.x || pos.x < 0) pos.x = 0;\n  if (!pos.y || pos.y < 0) pos.y = 0;\n  return pos;\n}\n\nfunction getPredicateValue(predicate, payload) {\n  return isFn(predicate) ? predicate(payload) : predicate;\n}\n\nfunction hasExitAnimation(animation) {\n  return !!(animation && (isStr(animation) || 'exit' in animation && animation.exit));\n}\n\nfunction reducer(state, payload) {\n  return isFn(payload) ? _extends({}, state, payload(state)) : _extends({}, state, payload);\n}\n\nvar Menu = function Menu(_ref) {\n  var _cx3;\n\n  var id = _ref.id,\n      theme = _ref.theme,\n      style = _ref.style,\n      className = _ref.className,\n      children = _ref.children,\n      _ref$animation = _ref.animation,\n      animation = _ref$animation === void 0 ? 'scale' : _ref$animation,\n      _ref$onHidden = _ref.onHidden,\n      onHidden = _ref$onHidden === void 0 ? NOOP : _ref$onHidden,\n      _ref$onShown = _ref.onShown,\n      onShown = _ref$onShown === void 0 ? NOOP : _ref$onShown,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"id\", \"theme\", \"style\", \"className\", \"children\", \"animation\", \"onHidden\", \"onShown\"]);\n\n  var _useReducer = useReducer(reducer, {\n    x: 0,\n    y: 0,\n    visible: false,\n    triggerEvent: {},\n    propsFromTrigger: null,\n    willLeave: false\n  }),\n      state = _useReducer[0],\n      setState = _useReducer[1];\n\n  var nodeRef = useRef(null);\n  var didMount = useRef(false);\n  var wasVisible = usePrevious(state.visible);\n  var refTracker = useRefTracker();\n\n  var _useState = useState(function () {\n    return createMenuController();\n  }),\n      menuController = _useState[0]; // subscribe event manager\n\n\n  useEffect(function () {\n    didMount.current = true;\n    eventManager.on(id, show).on(0\n    /* HIDE_ALL */\n    , hide);\n    return function () {\n      eventManager.off(id, show).off(0\n      /* HIDE_ALL */\n      , hide);\n    }; // hide rely on setState(dispatch), which is guaranted to be the same across render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]); // handle show/ hide callback\n\n  useEffect(function () {\n    if (didMount.current && state.visible !== wasVisible) {\n      state.visible ? onShown() : onHidden();\n    } // wasWisible is a ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [state.visible, onHidden, onShown]); // collect menu items for keyboard navigation\n\n  useEffect(function () {\n    if (!state.visible) {\n      refTracker.clear();\n    } else {\n      menuController.init(Array.from(refTracker.values()));\n    }\n  }, [state.visible, menuController, refTracker]); // compute menu position\n\n  useEffect(function () {\n    if (state.visible) {\n      var _window = window,\n          windowWidth = _window.innerWidth,\n          windowHeight = _window.innerHeight;\n      var _nodeRef$current = nodeRef.current,\n          menuWidth = _nodeRef$current.offsetWidth,\n          menuHeight = _nodeRef$current.offsetHeight;\n      var _x = state.x,\n          _y = state.y;\n\n      if (_x + menuWidth > windowWidth) {\n        _x -= _x + menuWidth - windowWidth;\n      }\n\n      if (_y + menuHeight > windowHeight) {\n        _y -= _y + menuHeight - windowHeight;\n      }\n\n      setState({\n        x: _x,\n        y: _y\n      });\n    } // state.visible and state{x,y} are updated together\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [state.visible]); // subscribe dom events\n\n  useEffect(function () {\n    function handleKeyboard(e) {\n      e.preventDefault();\n\n      switch (e.key) {\n        case 'Enter':\n          if (!menuController.openSubmenu()) hide();\n          break;\n\n        case 'Escape':\n          hide();\n          break;\n\n        case 'ArrowUp':\n          menuController.moveUp();\n          break;\n\n        case 'ArrowDown':\n          menuController.moveDown();\n          break;\n\n        case 'ArrowRight':\n          menuController.openSubmenu();\n          break;\n\n        case 'ArrowLeft':\n          menuController.closeSubmenu();\n          break;\n      }\n    }\n\n    if (state.visible) {\n      window.addEventListener('resize', hide);\n      window.addEventListener('contextmenu', hide);\n      window.addEventListener('click', hide);\n      window.addEventListener('scroll', hide);\n      window.addEventListener('keydown', handleKeyboard); // This let us debug the menu in the console in dev mode\n\n      if (process.env.NODE_ENV !== 'development') {\n        window.addEventListener('blur', hide);\n      }\n    }\n\n    return function () {\n      window.removeEventListener('resize', hide);\n      window.removeEventListener('contextmenu', hide);\n      window.removeEventListener('click', hide);\n      window.removeEventListener('scroll', hide);\n      window.removeEventListener('keydown', handleKeyboard);\n\n      if (process.env.NODE_ENV !== 'development') {\n        window.removeEventListener('blur', hide);\n      }\n    }; // state.visible will let us get the right reference to `hide`\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.visible, menuController]);\n\n  function show(_ref2) {\n    var event = _ref2.event,\n        props = _ref2.props,\n        position = _ref2.position;\n    event.stopPropagation();\n\n    var _ref3 = position || getMousePosition(event),\n        x = _ref3.x,\n        y = _ref3.y; // prevent react from batching the state update\n    // if the menu is already visible we have to recompute bounding rect based on position\n\n\n    setTimeout(function () {\n      setState({\n        visible: true,\n        willLeave: false,\n        x: x,\n        y: y,\n        triggerEvent: event,\n        propsFromTrigger: props\n      });\n    }, 0);\n  }\n\n  function hide(event) {\n    // Safari trigger a click event when you ctrl + trackpad\n    // Firefox:  trigger a click event when right click occur\n    var e = event;\n\n    if (typeof e !== 'undefined' && (e.button === 2 || e.ctrlKey === true) && e.type !== 'contextmenu') {\n      return;\n    }\n\n    hasExitAnimation(animation) ? setState(function (state) {\n      return {\n        willLeave: state.visible\n      };\n    }) : setState(function (state) {\n      return {\n        visible: state.visible ? false : state.visible\n      };\n    });\n  }\n\n  function handleAnimationEnd() {\n    if (state.willLeave && state.visible) {\n      setState({\n        visible: false,\n        willLeave: false\n      });\n    }\n  }\n\n  function computeAnimationClasses() {\n    if (!animation) return null;\n\n    if (isStr(animation)) {\n      var _cx;\n\n      return cx((_cx = {}, _cx[\"react-contexify__will-enter--\"\n      /* animationWillEnter */\n      + animation] = animation && visible && !willLeave, _cx[\"react-contexify__will-leave--\"\n      /* animationWillLeave */\n      + animation + \" \" + \"react-contexify__will-leave--\"\n      /* animationWillLeave */\n      + \"'disabled'\"] = animation && visible && willLeave, _cx));\n    } else if ('enter' in animation && 'exit' in animation) {\n      var _cx2;\n\n      return cx((_cx2 = {}, _cx2[\"react-contexify__will-enter--\"\n      /* animationWillEnter */\n      + animation.enter] = animation.enter && visible && !willLeave, _cx2[\"react-contexify__will-leave--\"\n      /* animationWillLeave */\n      + animation.exit + \" \" + \"react-contexify__will-leave--\"\n      /* animationWillLeave */\n      + \"'disabled'\"] = animation.exit && visible && willLeave, _cx2));\n    }\n\n    return null;\n  }\n\n  var visible = state.visible,\n      triggerEvent = state.triggerEvent,\n      propsFromTrigger = state.propsFromTrigger,\n      x = state.x,\n      y = state.y,\n      willLeave = state.willLeave;\n  var cssClasses = cx(\"react-contexify\"\n  /* menu */\n  , className, (_cx3 = {}, _cx3[\"react-contexify__theme--\"\n  /* theme */\n  + theme] = theme, _cx3), computeAnimationClasses());\n\n  var menuStyle = _extends({}, style, {\n    left: x,\n    top: y,\n    opacity: 1\n  });\n\n  return React.createElement(RefTrackerProvider, {\n    refTracker: refTracker\n  }, visible && React.createElement(\"div\", Object.assign({}, rest, {\n    className: cssClasses,\n    onAnimationEnd: handleAnimationEnd,\n    style: menuStyle,\n    ref: nodeRef,\n    role: \"menu\"\n  }), cloneItems(children, {\n    propsFromTrigger: propsFromTrigger,\n    triggerEvent: triggerEvent\n  })));\n};\n\nvar Item = function Item(_ref) {\n  var _cx;\n\n  var children = _ref.children,\n      className = _ref.className,\n      style = _ref.style,\n      triggerEvent = _ref.triggerEvent,\n      data = _ref.data,\n      propsFromTrigger = _ref.propsFromTrigger,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === void 0 ? NOOP : _ref$onClick,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$hidden = _ref.hidden,\n      hidden = _ref$hidden === void 0 ? false : _ref$hidden,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"children\", \"className\", \"style\", \"triggerEvent\", \"data\", \"propsFromTrigger\", \"onClick\", \"disabled\", \"hidden\"]);\n\n  var refTracker = useRefTrackerContext();\n  var handlerParams = {\n    data: data,\n    triggerEvent: triggerEvent,\n    props: propsFromTrigger\n  };\n  var isDisabled = getPredicateValue(disabled, handlerParams);\n  var isHidden = getPredicateValue(hidden, handlerParams);\n\n  function handleClick(e) {\n    handlerParams.event = e;\n    isDisabled ? e.stopPropagation() : onClick(handlerParams);\n  }\n\n  function trackRef(node) {\n    if (node && !isDisabled) refTracker.set(node, {\n      node: node,\n      isSubmenu: false\n    });\n  }\n\n  function handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      handlerParams.event = e;\n      onClick(handlerParams);\n    }\n  }\n\n  if (isHidden) return null;\n  var cssClasses = cx(\"react-contexify__item\"\n  /* item */\n  , className, (_cx = {}, _cx[\"react-contexify__item--disabled\"\n  /* itemDisabled */\n  ] = isDisabled, _cx));\n  return React.createElement(\"div\", Object.assign({}, rest, {\n    className: cssClasses,\n    style: style,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    ref: trackRef,\n    tabIndex: -1,\n    role: \"menuitem\",\n    \"aria-disabled\": isDisabled\n  }), React.createElement(\"div\", {\n    className: \"react-contexify__item__content\"\n    /* itemContent */\n\n  }, children));\n};\n\nfunction Separator() {\n  return React.createElement(\"div\", {\n    className: \"react-contexify__separator\"\n    /* separator */\n\n  });\n}\n\nvar Submenu = function Submenu(_ref) {\n  var _cx;\n\n  var _ref$arrow = _ref.arrow,\n      arrow = _ref$arrow === void 0 ? '▶' : _ref$arrow,\n      children = _ref.children,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$hidden = _ref.hidden,\n      hidden = _ref$hidden === void 0 ? false : _ref$hidden,\n      label = _ref.label,\n      className = _ref.className,\n      triggerEvent = _ref.triggerEvent,\n      propsFromTrigger = _ref.propsFromTrigger,\n      style = _ref.style,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"arrow\", \"children\", \"disabled\", \"hidden\", \"label\", \"className\", \"triggerEvent\", \"propsFromTrigger\", \"style\"]);\n\n  var menuRefTracker = useRefTrackerContext();\n  var refTracker = useRefTracker();\n  var nodeRef = useRef(null);\n\n  var _useState = useState({\n    left: '100%',\n    top: 0,\n    bottom: 'initial'\n  }),\n      position = _useState[0],\n      setPosition = _useState[1];\n\n  var handlerParams = {\n    triggerEvent: triggerEvent,\n    props: propsFromTrigger\n  };\n  var isDisabled = getPredicateValue(disabled, handlerParams);\n  var isHidden = getPredicateValue(hidden, handlerParams);\n  useEffect(function () {\n    if (nodeRef.current) {\n      var _window = window,\n          innerWidth = _window.innerWidth,\n          innerHeight = _window.innerHeight;\n      var rect = nodeRef.current.getBoundingClientRect();\n      var _style = {};\n\n      if (rect.right < innerWidth) {\n        _style.left = '100%';\n        _style.right = undefined;\n      } else {\n        _style.right = '100%';\n        _style.left = undefined;\n      }\n\n      if (rect.bottom > innerHeight) {\n        _style.bottom = 0;\n        _style.top = 'initial';\n      } else {\n        _style.bottom = 'initial';\n      }\n\n      setPosition(_style);\n    }\n  }, []);\n\n  function handleClick(e) {\n    e.stopPropagation();\n  }\n\n  function trackRef(node) {\n    if (node && !isDisabled) menuRefTracker.set(node, {\n      node: node,\n      isSubmenu: true,\n      submenuRefTracker: refTracker\n    });\n  }\n\n  if (isHidden) return null;\n  var cssClasses = cx(\"react-contexify__item\"\n  /* item */\n  , className, (_cx = {}, _cx[\"react-contexify__item--disabled\"\n  /* itemDisabled */\n  ] = isDisabled, _cx));\n\n  var submenuStyle = _extends({}, style, position);\n\n  return React.createElement(RefTrackerProvider, {\n    refTracker: refTracker\n  }, React.createElement(\"div\", Object.assign({}, rest, {\n    className: cssClasses,\n    ref: trackRef,\n    tabIndex: -1,\n    role: \"menuitem\",\n    \"aria-haspopup\": true,\n    \"aria-disabled\": isDisabled\n  }), React.createElement(\"div\", {\n    className: \"react-contexify__item__content\"\n    /* itemContent */\n    ,\n    onClick: handleClick\n  }, label, React.createElement(\"span\", {\n    className: \"react-contexify__submenu-arrow\"\n    /* submenuArrow */\n\n  }, arrow)), React.createElement(\"div\", {\n    className: \"react-contexify react-contexify__submenu\"\n    /* submenu */\n    ,\n    ref: nodeRef,\n    style: submenuStyle\n  }, cloneItems(children, {\n    propsFromTrigger: propsFromTrigger,\n    // injected by the parent\n    triggerEvent: triggerEvent\n  }))));\n};\n\nexport { Item, Menu, Separator, Submenu, animation, contextMenu, theme, useContextMenu };","map":null,"metadata":{},"sourceType":"module"}