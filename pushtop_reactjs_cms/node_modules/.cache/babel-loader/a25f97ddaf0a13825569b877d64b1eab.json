{"ast":null,"code":"!function (o) {\n  var t = o.util.clone(o.languages.javascript),\n      e = \"(?:\\\\{<S>*\\\\.{3}(?:[^{}]|<BRACES>)*\\\\})\";\n\n  function n(t, n) {\n    return t = t.replace(/<S>/g, function () {\n      return \"(?:\\\\s|//.*(?!.)|/\\\\*(?:[^*]|\\\\*(?!/))\\\\*/)\";\n    }).replace(/<BRACES>/g, function () {\n      return \"(?:\\\\{(?:\\\\{(?:\\\\{[^{}]*\\\\}|[^{}])*\\\\}|[^{}])*\\\\})\";\n    }).replace(/<SPREAD>/g, function () {\n      return e;\n    }), RegExp(t, n);\n  }\n\n  e = n(e).source, o.languages.jsx = o.languages.extend(\"markup\", t), o.languages.jsx.tag.pattern = n(\"</?(?:[\\\\w.:-]+(?:<S>+(?:[\\\\w.:$-]+(?:=(?:\\\"(?:\\\\\\\\[^]|[^\\\\\\\\\\\"])*\\\"|'(?:\\\\\\\\[^]|[^\\\\\\\\'])*'|[^\\\\s{'\\\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*/?)?>\"), o.languages.jsx.tag.inside.tag.pattern = /^<\\/?[^\\s>\\/]*/, o.languages.jsx.tag.inside[\"attr-value\"].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/, o.languages.jsx.tag.inside.tag.inside[\"class-name\"] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/, o.languages.jsx.tag.inside.comment = t.comment, o.languages.insertBefore(\"inside\", \"attr-name\", {\n    spread: {\n      pattern: n(\"<SPREAD>\"),\n      inside: o.languages.jsx\n    }\n  }, o.languages.jsx.tag), o.languages.insertBefore(\"inside\", \"special-attr\", {\n    script: {\n      pattern: n(\"=<BRACES>\"),\n      alias: \"language-javascript\",\n      inside: {\n        \"script-punctuation\": {\n          pattern: /^=(?=\\{)/,\n          alias: \"punctuation\"\n        },\n        rest: o.languages.jsx\n      }\n    }\n  }, o.languages.jsx.tag);\n\n  var i = function (t) {\n    return t ? \"string\" == typeof t ? t : \"string\" == typeof t.content ? t.content : t.content.map(i).join(\"\") : \"\";\n  },\n      r = function (t) {\n    for (var n = [], e = 0; e < t.length; e++) {\n      var a = t[e],\n          s = !1;\n\n      if (\"string\" != typeof a && (\"tag\" === a.type && a.content[0] && \"tag\" === a.content[0].type ? \"</\" === a.content[0].content[0].content ? 0 < n.length && n[n.length - 1].tagName === i(a.content[0].content[1]) && n.pop() : \"/>\" === a.content[a.content.length - 1].content || n.push({\n        tagName: i(a.content[0].content[1]),\n        openedBraces: 0\n      }) : 0 < n.length && \"punctuation\" === a.type && \"{\" === a.content ? n[n.length - 1].openedBraces++ : 0 < n.length && 0 < n[n.length - 1].openedBraces && \"punctuation\" === a.type && \"}\" === a.content ? n[n.length - 1].openedBraces-- : s = !0), (s || \"string\" == typeof a) && 0 < n.length && 0 === n[n.length - 1].openedBraces) {\n        var g = i(a);\n        e < t.length - 1 && (\"string\" == typeof t[e + 1] || \"plain-text\" === t[e + 1].type) && (g += i(t[e + 1]), t.splice(e + 1, 1)), 0 < e && (\"string\" == typeof t[e - 1] || \"plain-text\" === t[e - 1].type) && (g = i(t[e - 1]) + g, t.splice(e - 1, 1), e--), t[e] = new o.Token(\"plain-text\", g, null, g);\n      }\n\n      a.content && \"string\" != typeof a.content && r(a.content);\n    }\n  };\n\n  o.hooks.add(\"after-tokenize\", function (t) {\n    \"jsx\" !== t.language && \"tsx\" !== t.language || r(t.tokens);\n  });\n}(Prism);","map":null,"metadata":{},"sourceType":"script"}