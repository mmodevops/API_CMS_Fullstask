{"ast":null,"code":"import { InternMap } from \"internmap\";\nimport identity from \"./identity.js\";\nexport default function group(values) {\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  return nest(values, identity, identity, keys);\n}\nexport function groups(values) {\n  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    keys[_key2 - 1] = arguments[_key2];\n  }\n\n  return nest(values, Array.from, identity, keys);\n}\nexport function rollup(values, reduce) {\n  for (var _len3 = arguments.length, keys = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n    keys[_key3 - 2] = arguments[_key3];\n  }\n\n  return nest(values, identity, reduce, keys);\n}\nexport function rollups(values, reduce) {\n  for (var _len4 = arguments.length, keys = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    keys[_key4 - 2] = arguments[_key4];\n  }\n\n  return nest(values, Array.from, reduce, keys);\n}\nexport function index(values) {\n  for (var _len5 = arguments.length, keys = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    keys[_key5 - 1] = arguments[_key5];\n  }\n\n  return nest(values, identity, unique, keys);\n}\nexport function indexes(values) {\n  for (var _len6 = arguments.length, keys = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    keys[_key6 - 1] = arguments[_key6];\n  }\n\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);else groups.set(key, [value]);\n    }\n\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n\n    return map(groups);\n  }(values, 0);\n}","map":null,"metadata":{},"sourceType":"module"}