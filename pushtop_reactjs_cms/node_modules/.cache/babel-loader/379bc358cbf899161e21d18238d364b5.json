{"ast":null,"code":"// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // ** Axios Imports\n\nimport axios from 'axios';\nexport const getAllRoles = createAsyncThunk('appUsers/getAllRoles', async params => {\n  const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/api/role`, {\n    params\n  });\n  return {\n    role: response.data.roleInfo\n  };\n}); // export const getAllData = createAsyncThunk('appUsers/getAllData', async () => {\n//   const response = await axios.get('/api/users/list/all-data')\n//   return response.data\n// })\n\nexport const getData = createAsyncThunk('appUsers/getData', async params => {\n  const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/api/user`, {\n    params\n  });\n  return {\n    params,\n    data: response.data.userInfo,\n    countActiveUser: response.data.countActiveUser,\n    countPendingUser: response.data.countPendingUser,\n    totalUsers: response.data.totalUsers,\n    totalPages: response.data.totalPages\n  };\n});\nexport const getUser = createAsyncThunk('appUsers/getUser', async id => {\n  const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/api/user/${id}`);\n  return response.data.userData;\n});\nexport const updateStatus = createAsyncThunk('appUsers/updateUser', async (params, _ref) => {\n  let {\n    dispatch\n  } = _ref;\n  console.log(params);\n  await axios.put(`${process.env.REACT_APP_API_ENDPOINT}/api/user`, {\n    params\n  });\n  await dispatch(getUser(params.id));\n  return response.data.userData;\n});\nexport const addUser = createAsyncThunk('appUsers/addUser', async (user, _ref2) => {\n  let {\n    dispatch,\n    getState\n  } = _ref2;\n  // await axios.post('/apps/users/add-user', user)\n  await dispatch(getData(getState().users.params));\n  await dispatch(getAllData());\n  return user;\n});\nexport const deleteUser = createAsyncThunk('appUsers/deleteUser', async (id, _ref3) => {\n  let {\n    dispatch,\n    getState\n  } = _ref3;\n  // await axios.delete('/apps/users/delete', { id })\n  await dispatch(getData(getState().users.params));\n  await dispatch(getAllData());\n  return id;\n});\nexport const appUsersSlice = createSlice({\n  name: 'appUsers',\n  initialState: {\n    data: [],\n    totalUsers: [],\n    totalPages: 1,\n    countActiveUser: [],\n    countPendingUser: [],\n    params: {},\n    allData: [],\n    role: [],\n    selectedUser: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder // .addCase(getAllData.fulfilled, (state, action) => {\n    //   state.allData = action.payload\n    // })\n    .addCase(getAllRoles.fulfilled, (state, action) => {\n      state.role = action.payload.role;\n    }).addCase(getData.fulfilled, (state, action) => {\n      state.data = action.payload.data;\n      state.params = action.payload.params;\n      state.countActiveUser = action.payload.countActiveUser;\n      state.countPendingUser = action.payload.countPendingUser;\n      state.totalUsers = action.payload.totalUsers;\n      state.totalPages = action.payload.totalPages;\n    }).addCase(getUser.fulfilled, (state, action) => {\n      state.selectedUser = action.payload;\n    });\n  }\n});\nexport default appUsersSlice.reducer;","map":{"version":3,"sources":["E:/Project/pushtop_reactjs_cms/src/views/ptcms/apps/user/store/index.js"],"names":["createSlice","createAsyncThunk","axios","getAllRoles","params","response","get","process","env","REACT_APP_API_ENDPOINT","role","data","roleInfo","getData","userInfo","countActiveUser","countPendingUser","totalUsers","totalPages","getUser","id","userData","updateStatus","dispatch","console","log","put","addUser","user","getState","users","getAllData","deleteUser","appUsersSlice","name","initialState","allData","selectedUser","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"mappings":"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","sourcesContent":["// ** Redux Imports\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\n// ** Axios Imports\r\nimport axios from 'axios'\r\n\r\nexport const getAllRoles = createAsyncThunk('appUsers/getAllRoles', async params => {\r\n  const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/api/role`, {params})\r\n  return {\r\n    role: response.data.roleInfo\r\n  }\r\n})\r\n\r\n// export const getAllData = createAsyncThunk('appUsers/getAllData', async () => {\r\n//   const response = await axios.get('/api/users/list/all-data')\r\n//   return response.data\r\n// })\r\n\r\nexport const getData = createAsyncThunk('appUsers/getData', async params => {\r\n  const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/api/user`, {params})\r\n  return {\r\n    params,\r\n    data: response.data.userInfo,\r\n    countActiveUser: response.data.countActiveUser,\r\n    countPendingUser:response.data.countPendingUser,\r\n    totalUsers: response.data.totalUsers,\r\n    totalPages: response.data.totalPages\r\n  }\r\n})\r\n\r\nexport const getUser = createAsyncThunk('appUsers/getUser', async id => {\r\n  const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/api/user/${id}`)\r\n  return response.data.userData\r\n})\r\n\r\nexport const updateStatus = createAsyncThunk('appUsers/updateUser', async (params, { dispatch }) => {\r\n  console.log(params)\r\n  await axios.put(`${process.env.REACT_APP_API_ENDPOINT}/api/user`, {params})\r\n  await dispatch(getUser(params.id))\r\n  return response.data.userData\r\n})\r\n\r\nexport const addUser = createAsyncThunk('appUsers/addUser', async (user, { dispatch, getState }) => {\r\n  // await axios.post('/apps/users/add-user', user)\r\n  await dispatch(getData(getState().users.params))\r\n  await dispatch(getAllData())\r\n  return user\r\n})\r\n\r\nexport const deleteUser = createAsyncThunk('appUsers/deleteUser', async (id, { dispatch, getState }) => {\r\n  // await axios.delete('/apps/users/delete', { id })\r\n  await dispatch(getData(getState().users.params))\r\n  await dispatch(getAllData())\r\n  return id\r\n})\r\n\r\nexport const appUsersSlice = createSlice({\r\n  name: 'appUsers',\r\n  initialState: {\r\n    data: [],\r\n    totalUsers: [],\r\n    totalPages: 1,\r\n    countActiveUser: [],\r\n    countPendingUser: [],\r\n    params: {},\r\n    allData: [],\r\n    role:[],\r\n    selectedUser: null\r\n  },\r\n  reducers: {},\r\n  extraReducers: builder => {\r\n    builder\r\n      // .addCase(getAllData.fulfilled, (state, action) => {\r\n      //   state.allData = action.payload\r\n      // })\r\n      .addCase(getAllRoles.fulfilled, (state, action) => {\r\n        state.role = action.payload.role\r\n      })\r\n      .addCase(getData.fulfilled, (state, action) => {\r\n        state.data = action.payload.data\r\n        state.params = action.payload.params\r\n        state.countActiveUser = action.payload.countActiveUser\r\n        state.countPendingUser = action.payload.countPendingUser\r\n        state.totalUsers = action.payload.totalUsers\r\n        state.totalPages = action.payload.totalPages\r\n      })\r\n      .addCase(getUser.fulfilled, (state, action) => {\r\n        state.selectedUser = action.payload\r\n      })\r\n  }\r\n})\r\n\r\nexport default appUsersSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}