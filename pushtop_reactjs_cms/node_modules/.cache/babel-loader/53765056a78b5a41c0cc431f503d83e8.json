{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\pushtop_reactjs_cms\\\\src\\\\views\\\\components\\\\popovers\\\\PopoverSourceCode.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const popoverControlled = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: `\nimport React, { useState } from 'react'\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverControlled = () => {\n  const [popoverOpen, setPopoverOpen] = useState(false)\n\n  return (\n    <React.Fragment>\n      <Button color='primary' outline id='controlledPopover'>\n        Controlled\n      </Button>\n      <Popover\n        placement='top'\n        target='controlledPopover'\n        isOpen={popoverOpen}\n        toggle={() => setPopoverOpen(!popoverOpen)}\n      >\n        <PopoverHeader>Controlled Popover</PopoverHeader>\n        <PopoverBody>\n          Macaroon chocolate candy. I love carrot cake gingerbread cake lemon\n          drops. Muffin sugar plum marzipan pie.\n        </PopoverBody>\n      </Popover>\n    </React.Fragment>\n  )\n}\nexport default PopoverControlled\n`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 2,\n  columnNumber: 3\n}, this);\nexport const popoverUncontrolled = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: `\n\nimport {\n  Button,\n  UncontrolledPopover,\n  PopoverHeader,\n  PopoverBody\n} from 'reactstrap'\n\nconst PopoverUncontrolled = () => {\n  return (\n    <React.Fragment>\n      <Button color='primary' outline id='uncontrolledPopover'>\n        Uncontrolled\n      </Button>\n      <UncontrolledPopover placement='top' target='uncontrolledPopover'>\n        <PopoverHeader>Uncontrolled Popover</PopoverHeader>\n        <PopoverBody>\n          Macaroon chocolate candy. I love carrot cake gingerbread cake lemon\n          drops. Muffin sugar plum marzipan pie.\n        </PopoverBody>\n      </UncontrolledPopover>\n    </React.Fragment>\n  )\n}\nexport default PopoverUncontrolled\n`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 38,\n  columnNumber: 3\n}, this);\nexport const popoverPositions = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: `\n\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverPositions = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary' outline id='popTop'>\n        Top\n      </Button>\n      <UncontrolledPopover placement='top' target='popTop'>\n        <PopoverHeader>Popover Top</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popRight'>\n        Right\n      </Button>\n      <UncontrolledPopover placement='right' target='popRight'>\n        <PopoverHeader>Popover Right</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popBottom'>\n        Bottom\n      </Button>\n      <UncontrolledPopover placement='bottom' target='popBottom'>\n        <PopoverHeader>Popover Bottom</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popLeft'>\n        Left\n      </Button>\n      <UncontrolledPopover placement='left' target='popLeft'>\n        <PopoverHeader>Popover Left</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n    </div>\n  )\n}\n\nexport default PopoverPositions\n`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 72,\n  columnNumber: 3\n}, this);\nexport const popoverTriggers = /*#__PURE__*/_jsxDEV(\"pre\", {\n  children: /*#__PURE__*/_jsxDEV(\"code\", {\n    className: \"language-jsx\",\n    children: `\n\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverTriggers = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary' outline id='popFocus'>\n        Focus\n      </Button>\n      <UncontrolledPopover trigger='focus' placement='top' target='popFocus'>\n        <PopoverHeader>Focus Trigger</PopoverHeader>\n        <PopoverBody>\n          Focusing on the trigging element makes this popover appear. Blurring (clicking away) makes it disappear. You\n          cannot select this text as the popover will disappear when you try.\n        </PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popClick'>\n        Click\n      </Button>\n      <UncontrolledPopover trigger='click' placement='top' target='popClick'>\n        <PopoverHeader>Click Trigger</PopoverHeader>\n        <PopoverBody>\n          Clicking on the triggering element makes this popover appear. Clicking on it again will make it disappear. You\n          can select this text, but clicking away (somewhere other than the triggering element) will not dismiss this\n          popover.\n        </PopoverBody>\n      </UncontrolledPopover>\n\n      <Button trigger='legacy' color='primary' outline id='popLegacy'>\n        Legacy\n      </Button>\n      <UncontrolledPopover placement='top' target='popLegacy'>\n        <PopoverHeader>Legacy Trigger</PopoverHeader>\n        <PopoverBody>\n          Legacy is a reactstrap special trigger value (outside of bootstrap's spec/standard). Before reactstrap\n          correctly supported click and focus, it had a hybrid which was very useful and has been brought back as\n          trigger=\"legacy\". One advantage of the legacy trigger is that it allows the popover text to be selected while\n          also closing when clicking outside the triggering element and popover itself.\n        </PopoverBody>\n      </UncontrolledPopover>\n    </div>\n  )\n}\nexport default PopoverTriggers\n`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 123,\n  columnNumber: 3\n}, this);","map":{"version":3,"sources":["E:/Project/pushtop_reactjs_cms/src/views/components/popovers/PopoverSourceCode.js"],"names":["popoverControlled","popoverUncontrolled","popoverPositions","popoverTriggers"],"mappings":";;AAAA,OAAO,MAAMA,iBAAiB,gBAC5B;AAAA,yBACE;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA,cACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BI;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADK;AAoCP,OAAO,MAAMC,mBAAmB,gBAC9B;AAAA,yBACE;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA,cACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BI;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADK;AAkCP,OAAO,MAAMC,gBAAgB,gBAC3B;AAAA,yBACE;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA,cACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CI;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADK;AAmDP,OAAO,MAAMC,eAAe,gBAC1B;AAAA,yBACE;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA,cACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CI;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADK","sourcesContent":["export const popoverControlled = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport React, { useState } from 'react'\r\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap'\r\n\r\nconst PopoverControlled = () => {\r\n  const [popoverOpen, setPopoverOpen] = useState(false)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button color='primary' outline id='controlledPopover'>\r\n        Controlled\r\n      </Button>\r\n      <Popover\r\n        placement='top'\r\n        target='controlledPopover'\r\n        isOpen={popoverOpen}\r\n        toggle={() => setPopoverOpen(!popoverOpen)}\r\n      >\r\n        <PopoverHeader>Controlled Popover</PopoverHeader>\r\n        <PopoverBody>\r\n          Macaroon chocolate candy. I love carrot cake gingerbread cake lemon\r\n          drops. Muffin sugar plum marzipan pie.\r\n        </PopoverBody>\r\n      </Popover>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default PopoverControlled\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const popoverUncontrolled = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport {\r\n  Button,\r\n  UncontrolledPopover,\r\n  PopoverHeader,\r\n  PopoverBody\r\n} from 'reactstrap'\r\n\r\nconst PopoverUncontrolled = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Button color='primary' outline id='uncontrolledPopover'>\r\n        Uncontrolled\r\n      </Button>\r\n      <UncontrolledPopover placement='top' target='uncontrolledPopover'>\r\n        <PopoverHeader>Uncontrolled Popover</PopoverHeader>\r\n        <PopoverBody>\r\n          Macaroon chocolate candy. I love carrot cake gingerbread cake lemon\r\n          drops. Muffin sugar plum marzipan pie.\r\n        </PopoverBody>\r\n      </UncontrolledPopover>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default PopoverUncontrolled\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const popoverPositions = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap'\r\n\r\nconst PopoverPositions = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Button color='primary' outline id='popTop'>\r\n        Top\r\n      </Button>\r\n      <UncontrolledPopover placement='top' target='popTop'>\r\n        <PopoverHeader>Popover Top</PopoverHeader>\r\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\r\n      </UncontrolledPopover>\r\n\r\n      <Button color='primary' outline id='popRight'>\r\n        Right\r\n      </Button>\r\n      <UncontrolledPopover placement='right' target='popRight'>\r\n        <PopoverHeader>Popover Right</PopoverHeader>\r\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\r\n      </UncontrolledPopover>\r\n\r\n      <Button color='primary' outline id='popBottom'>\r\n        Bottom\r\n      </Button>\r\n      <UncontrolledPopover placement='bottom' target='popBottom'>\r\n        <PopoverHeader>Popover Bottom</PopoverHeader>\r\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\r\n      </UncontrolledPopover>\r\n\r\n      <Button color='primary' outline id='popLeft'>\r\n        Left\r\n      </Button>\r\n      <UncontrolledPopover placement='left' target='popLeft'>\r\n        <PopoverHeader>Popover Left</PopoverHeader>\r\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\r\n      </UncontrolledPopover>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PopoverPositions\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const popoverTriggers = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap'\r\n\r\nconst PopoverTriggers = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Button color='primary' outline id='popFocus'>\r\n        Focus\r\n      </Button>\r\n      <UncontrolledPopover trigger='focus' placement='top' target='popFocus'>\r\n        <PopoverHeader>Focus Trigger</PopoverHeader>\r\n        <PopoverBody>\r\n          Focusing on the trigging element makes this popover appear. Blurring (clicking away) makes it disappear. You\r\n          cannot select this text as the popover will disappear when you try.\r\n        </PopoverBody>\r\n      </UncontrolledPopover>\r\n\r\n      <Button color='primary' outline id='popClick'>\r\n        Click\r\n      </Button>\r\n      <UncontrolledPopover trigger='click' placement='top' target='popClick'>\r\n        <PopoverHeader>Click Trigger</PopoverHeader>\r\n        <PopoverBody>\r\n          Clicking on the triggering element makes this popover appear. Clicking on it again will make it disappear. You\r\n          can select this text, but clicking away (somewhere other than the triggering element) will not dismiss this\r\n          popover.\r\n        </PopoverBody>\r\n      </UncontrolledPopover>\r\n\r\n      <Button trigger='legacy' color='primary' outline id='popLegacy'>\r\n        Legacy\r\n      </Button>\r\n      <UncontrolledPopover placement='top' target='popLegacy'>\r\n        <PopoverHeader>Legacy Trigger</PopoverHeader>\r\n        <PopoverBody>\r\n          Legacy is a reactstrap special trigger value (outside of bootstrap's spec/standard). Before reactstrap\r\n          correctly supported click and focus, it had a hybrid which was very useful and has been brought back as\r\n          trigger=\"legacy\". One advantage of the legacy trigger is that it allows the popover text to be selected while\r\n          also closing when clicking outside the triggering element and popover itself.\r\n        </PopoverBody>\r\n      </UncontrolledPopover>\r\n    </div>\r\n  )\r\n}\r\nexport default PopoverTriggers\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n"]},"metadata":{},"sourceType":"module"}